# -*- coding: utf-8 -*-
"""Final -  Pickle of ASSIGNMENT - LogisticRegression - Deployment - Final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y92mjykDp-6LCWrn3wV6VUXWKMW7QBVC
"""

import pandas as pd # LOAD DATASET
import pickle

new_df = pd.read_csv('Titanic_train.csv')
target = pd.read_csv('Titanic_test.csv')

new_df = pd.concat([new_df, target], ignore_index=True )
new_df['Fare']=new_df['Fare'].fillna(new_df['Fare'].mean())

# FEATURE EXTRACTION - i did perform it before EDA- 1 as the feature & target variable are given
# separately.

# DATA PREPROCESSING : - "Imputation"
# Imputation i am using here to fill the blank rows, keeping rows empty can lead to
# model not run.
# I am using imputation here by filling the 'age' column with mean value of overall rows.
new_df['Age']=new_df['Age'].fillna(new_df['Age'].mean())

# i am using imputation by applying most frequent rows into the blank ones in
# Embarked, as its having only 2-rows empty.

new_df['Embarked']=new_df['Embarked'].fillna(new_df['Embarked'].mode()[0])

# i am using imputation here, by first separating first letter of Cabin,
# beacause, it is deck no. which i feel is the only useful for process.
# After that i did put a random string 'U' in the null rows.

new_df['Cabin']=new_df['Cabin'].str[0]

new_df['Cabin']=new_df['Cabin'].fillna('U')

# I drop the columns PassengerID & Name.
# Main reason : - having data value in all rows unique, Regression will not work.
# PassengerID is just serial no. as per the registration. and in +1 incerasing order.
# Name - i believe would not matter, as there are string data, which is not eay to convert
# into continuous no. or binary

new_df=new_df.drop(['PassengerId','Name'],axis=1)

sex_label = {'male': 1, 'female': 0}
embarked_label = {'S': 2, 'C': 0, 'Q': 1}
cabin_label = {'U': 8, 'C': 2, 'B': 1, 'D': 3, 'E': 4, 'A': 0, 'F': 5, 'G': 6, 'T': 7}

new_df['Embarked'] = new_df['Embarked'].map(embarked_label)
new_df['Sex'] = new_df['Sex'].map(sex_label)
new_df['Cabin'] = new_df['Cabin'].map(cabin_label)

# removing ticket as its having 76% on unique values as string & integers.
new_df=new_df.drop(['Ticket'],axis=1)

x = new_df.drop(['Survived'],axis=1)
y= new_df['Survived']

y_train = y.iloc[0:891]
x_train = x.iloc[0:891]
x_test = x.iloc[892:1309]

x_train_scaled = (x_train - x_train.mean())/ x_train.std()

from sklearn.linear_model import LogisticRegression
model=LogisticRegression()
model1 = model.fit(x_train_scaled,y_train)

with open("logistic_regression_model.pkl", "wb") as file:
  pickle.dump(model1, file)

import streamlit as st
import pickle
import pandas as pd

# Load trained model
with open("logistic_regression_model.pkl", "rb") as file:
    model = pickle.load(file)

# ðŸš¨ Manually define training means and stds (must match training data)
# These are EXAMPLES â€“ replace with actual values from your training data
training_means = {
    'Pclass': 2.308642,
    'Sex': 0.647587,
    'Age': 29.735277,
    'SibSp': 0.523008,
    'Parch': 0.381594,
    'Fare': 32.204208,
    'Cabin': 6.716049,
    'Embarked': 1.536476
}

training_stds = {
    'Pclass': 0.836071,
    'Sex': 0.477990,
    'Age': 13.002218,
    'SibSp': 1.102743,
    'Parch': 0.806057,
    'Fare': 49.693429,
    'Cabin': 2.460739,
    'Embarked': 0.791503
}

# Label encodings (your mappings)
sex_label = {'male': 1, 'female': 0}
embarked_label = {'S': 2, 'C': 0, 'Q': 1}
cabin_label = {'U': 8, 'C': 2, 'B': 1, 'D': 3, 'E': 4, 'A': 0, 'F': 5, 'G': 6, 'T': 7}

# UI inputs
st.title("Titanic Survival Prediction (Manual Scaling)")
st.write("Enter passenger details:")

pclass = st.selectbox("Passenger Class (Pclass)", [1, 2, 3])
sex_str = st.selectbox("Sex", list(sex_label.keys()))
age = st.number_input("Age", min_value=0, max_value=100, value=30)
sibsp = st.number_input("Siblings/Spouses Aboard", min_value=0, max_value=10, value=0)
parch = st.number_input("Parents/Children Aboard", min_value=0, max_value=10, value=0)
fare = st.number_input("Fare", min_value=0, max_value=600, value=30)
cabin_str = st.selectbox("Cabin Deck", list(cabin_label.keys()))
embarked_str = st.selectbox("Port of Embarkation", list(embarked_label.keys()))

# Encode input
sex = sex_label[sex_str]
cabin = cabin_label[cabin_str]
embarked = embarked_label[embarked_str]

# Create raw input data
input_data = {
    'Pclass': pclass,
    'Sex': sex,
    'Age': age,
    'SibSp': sibsp,
    'Parch': parch,
    'Fare': fare,
    'Cabin': cabin,
    'Embarked': embarked
}
if st.button("Predict"):
    #  Manual Standard Scaling
    scaled_input = {}
    for feature in input_data:
        mean = training_means[feature]
        std = training_stds[feature]
        scaled_value = (input_data[feature] - mean) / std
        scaled_input[feature] = scaled_value

# Convert to DataFrame (shape: [1, 8])
scaled_df = pd.DataFrame([scaled_input])

#  Predict
prediction = model.predict(scaled_df)
prob = model.predict_proba(scaled_df)[0][1]

#  Output
if prediction[0] == 1:
    st.success(f" The passenger is likely to **survive** with a probability of `{prob:.2f}`.")
else:
    st.error(f" The passenger is likely to **not survive** with a probability of `{1 - prob:.2f}`.")
